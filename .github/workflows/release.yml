name: release

on:
  push:
    branches:
      - "master"
      - "[0-9]+.[0-9]+.x"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  BUILD_NUMBER: ${{ github.run_number }}
  COMMIT_SHA: ${{ github.sha }}
  ENVCONSUL_VERSION: 0.9.3
  NODE_VERSION: 16.18.1
  NSSM_VERSION: 2.24.5
  SEVENZIP_VERSION: "19.00"
  LOG_LEVELS: fatal
  TLS_UNPROTECTED: world

jobs:
  Test-Linux:
    # Only on branch, ignore release commits and automatic updates of build config
    if: >
      startsWith(github.ref, 'refs/heads/') &&
      !startsWith(github.event.head_commit.message, 'Release') &&
      github.event.head_commit.message != 'Update build configuration'

    runs-on: ubuntu-22.04

    services:
      mongo:
        image: ghcr.io/sealsystems/mongodb-rs:4.4.4
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.CI_TOKEN }}
        ports:
          - 27017:27017
      consul:
        image: consul:1.7.4
        ports:
          - 8500:8500

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-16.18.1-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Run tests
        run: npm run bot
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

  Test-Windows:
    # Only on branch, ignore release commits and automatic updates of build config
    if: >
      startsWith(github.ref, 'refs/heads/') &&
      !startsWith(github.event.head_commit.message, 'Release') &&
      github.event.head_commit.message != 'Update build configuration'

    runs-on: windows-2019

    defaults:
      run:
        # Set Shell to default Powershell, not pwsh
        shell: powershell -Command "& '{0}'"

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3

      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Install MongoDB 4.4.4
        run: |
          Write-Host "Stopping existing MongoDB service..."
          Stop-Service mongodb -force

          Write-Host "Downloading https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4.zip ..."
          (New-Object Net.WebClient).DownloadFile(
            "https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4.zip",
            "C:\mongodb-windows-x86_64-4.4.4.zip"
          )

          Write-Host "Extracting zip archive to C:\mongodb ..."
          Expand-Archive "C:\mongodb-windows-x86_64-4.4.4.zip" -DestinationPath "C:\"
          Rename-Item "C:\mongodb-win32-x86_64-windows-4.4.4" "C:\mongodb"

          Write-Host "Creating necessary folders in C:\mongodb ..."
          mkdir c:\mongodb\data\db | Out-Null
          mkdir c:\mongodb\log | Out-Null

          Write-Host "Writing MongoDB configuration..."
          "systemLog:
            destination: file
            path: c:\mongodb\log\mongod.log
          storage:
            dbPath: c:\mongodb\data\db
          replication:
            replSetName: rs0
          " | Out-File C:\mongodb\mongod.cfg -Encoding utf8

          Write-Host "Creating seal-mongodb service..."
          cmd /c start /wait sc create seal-mongodb binPath= "C:\mongodb\bin\mongod.exe --service --config=C:\mongodb\mongod.cfg" DisplayName= "seal-mongodb" start= "demand"

          Write-Host "Starting seal-mongodb service..."
          Start-Service seal-mongodb

          Write-Host "Initiate MonogDB replicaSet..."
          C:\mongodb\bin\mongo.exe --eval 'rs.initiate()'

      - name: Install Consul 1.7.4
        run: |
          Write-Host "Creating necessary folders in C:\consul ..."
          mkdir c:\consul\data | Out-Null

          Write-Host "Downloading https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip ..."
          (New-Object Net.WebClient).DownloadFile(
            "https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip",
            "C:\consul\consul_1.7.4_windows_amd64.zip"
          )

          Write-Host "Extracting zip archive to C:\consul ..."
          Expand-Archive "C:\consul\consul_1.7.4_windows_amd64.zip" -DestinationPath "C:\consul"

          Write-Host "Writing Consul configuration..."
          @{
            bind_addr="127.0.0.1"
            bootstrap_expect=1
            data_dir="C:\consul\data"
            ports=@{
              http=-1
              dns=53
              https=8500
            }
            cert_file="$($env:GITHUB_WORKSPACE)\tls\cert.pem"
            key_file="$($env:GITHUB_WORKSPACE)\tls\key.pem"
            server=$True
          } | ConvertTo-Json | Out-File -Filepath "C:\consul\config.json" -Encoding ascii

          Write-Host "Starting Consul service..."
          cmd /c start /wait sc create Consul binPath= "C:\consul\consul.exe agent -config-file=C:\consul\config.json" DisplayName= "Consul" start= "demand"
          Start-Service Consul

      - name: Install dependencies
        run: npm ci
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Run tests
        run: npm run bot
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

  Release:
    # Only on branch, ignore release commits and automatic updates of build config
    if: >
      startsWith(github.ref, 'refs/heads/') &&
      !startsWith(github.event.head_commit.message, 'Release') &&
      github.event.head_commit.message != 'Update build configuration'

    needs:
      - Test-Linux
      - Test-Windows

    runs-on: ubuntu-22.04

    env:
      GIT_AUTHOR_EMAIL: com.git@sealsystems.de
      GIT_AUTHOR_NAME: CI Build
      GIT_COMMITTER_EMAIL: com.git@sealsystems.de
      GIT_COMMITTER_NAME: CI Build
      # Use personal access token for creating releases on GitHub
      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      # Use personal access token for publishing on GitHub Packages
      NPM_TOKEN: ${{ secrets.CI_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          # Use personal access token for cloning (and later pushing) code
          token: ${{ secrets.CI_TOKEN }}

      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Install dependencies
        run: npm ci
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v23

          #      - name: Extend knowledgebase if errors.js was modified
          #        if: contains(steps.changed-files.outputs.modified_files, 'lib/errors.js')
          #        run: |
          #          echo "Your errors.js has been modified."
          #          node ./.github/scripts/extend-knowledgebase.js
          #        env:
          #          KB_AUTH: ${{ secrets.KB_CREDENTIALS }}

      - name: Trigger release
        run: |
          npm install --no-save @sealsystems/semantic-release@latest
          npm run release
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

  Deploy-Linux:
    # Only on release tag
    if: startsWith(github.ref, 'refs/tags/')

    strategy:
      matrix:
        PACKAGE_TYPE:
          - rpm
          - docker

    runs-on: ubuntu-22.04

    env:
      PACKAGE_TYPE: ${{ matrix.PACKAGE_TYPE }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Install Node.js dependencies
        run: |
          npm ci --production
        working-directory: .github/scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Activate custom packaging files
        run: find packaging/linux -name '*.custom' -exec bash -c 'f="$1" && mv -f "$1" "${f%.custom}"' _ {} \;

      - name: Install package dependencies
        run: packaging/linux/${PACKAGE_TYPE}/install.sh
        env:
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Build
        run: packaging/linux/${PACKAGE_TYPE}/build.sh
        env:
          CI_TOKEN: ${{ secrets.CI_TOKEN }}
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Test
        run: packaging/linux/${PACKAGE_TYPE}/test.sh

      - name: Deploy
        run: packaging/linux/${PACKAGE_TYPE}/deploy.sh
        env:
          CI_TOKEN: ${{ secrets.CI_TOKEN }}
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Deploy-Windows:
    # Only on release tag
    if: startsWith(github.ref, 'refs/tags/')

    strategy:
      matrix:
        PACKAGE_TYPE:
          - msi
          # - docker

    runs-on: windows-2019

    defaults:
      run:
        # Set Shell to default Powershell, not pwsh
        shell: powershell -Command "& '{0}'"

    env:
      PACKAGE_TYPE: ${{ matrix.PACKAGE_TYPE }}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3

      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Install MongoDB 4.4.4
        run: |
          Write-Host "Stopping existing MongoDB service..."
          Stop-Service mongodb -force

          Write-Host "Downloading https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4.zip ..."
          (New-Object Net.WebClient).DownloadFile(
            "https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4.zip",
            "C:\mongodb-windows-x86_64-4.4.4.zip"
          )

          Write-Host "Extracting zip archive to C:\mongodb ..."
          Expand-Archive "C:\mongodb-windows-x86_64-4.4.4.zip" -DestinationPath "C:\"
          Rename-Item "C:\mongodb-win32-x86_64-windows-4.4.4" "C:\mongodb"

          Write-Host "Creating necessary folders in C:\mongodb ..."
          mkdir c:\mongodb\data\db | Out-Null
          mkdir c:\mongodb\log | Out-Null

          Write-Host "Writing MongoDB configuration..."
          "systemLog:
            destination: file
            path: c:\mongodb\log\mongod.log
          storage:
            dbPath: c:\mongodb\data\db
          replication:
            replSetName: rs0
          net:
            tls:
              mode: requireTLS
              certificateKeyFile: $($env:GITHUB_WORKSPACE)\tls\cert-key-combined.pem
          " | Out-File C:\mongodb\mongod.cfg -Encoding utf8

          Write-Host "Creating seal-mongodb service..."
          cmd /c start /wait sc create seal-mongodb binPath= "C:\mongodb\bin\mongod.exe --service --config=C:\mongodb\mongod.cfg" DisplayName= "seal-mongodb" start= "demand"

          Write-Host "Starting seal-mongodb service..."
          Start-Service seal-mongodb

          Write-Host "Initiate MonogDB replicaSet..."
          C:\mongodb\bin\mongo.exe --tls --tlsAllowInvalidCertificates --eval 'rs.initiate()'

      - name: Install Consul 1.7.4
        run: |
          Write-Host "Creating necessary folders in C:\consul ..."
          mkdir c:\consul\data | Out-Null

          Write-Host "Downloading https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip ..."
          (New-Object Net.WebClient).DownloadFile(
            "https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip",
            "C:\consul\consul_1.7.4_windows_amd64.zip"
          )

          Write-Host "Extracting zip archive to C:\consul ..."
          Expand-Archive "C:\consul\consul_1.7.4_windows_amd64.zip" -DestinationPath "C:\consul"

          Write-Host "Writing Consul configuration..."
          @{
            bind_addr="127.0.0.1"
            bootstrap_expect=1
            ports=@{
              http=-1
              dns=53
              https=8500
            }
            cert_file="$($env:GITHUB_WORKSPACE)\tls\cert.pem"
            key_file="$($env:GITHUB_WORKSPACE)\tls\key.pem"
            server=$True
          } | ConvertTo-Json | Out-File -Filepath "C:\consul\config.json" -Encoding ascii

      - name: Install Node.js dependencies for scripts
        run: |
          npm ci --production
        working-directory: .github/scripts
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Install Node.js dependencies for product
        run: |
          npm ci --production
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Activate custom packaging files
        # See: https://stackoverflow.com/a/21614001
        run: Get-ChildItem -Path packaging\windows -Recurse -Include *.custom | Move-Item -Force -Destination { $_.FullName.replace(".custom","") }

      - name: Install package dependencies
        run: packaging\windows\${{ matrix.PACKAGE_TYPE }}\install.ps1
        env:
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Build
        run: packaging\windows\${{ matrix.PACKAGE_TYPE }}\build.ps1
        env:
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}
          KeyFile: D:\SealIECert.pfx
          NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SignTool: C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe

      # Disable test since it does not work anyway and takes a long time to finish
      # - name: Test
      #   run: packaging\windows\${{ matrix.PACKAGE_TYPE }}\test.ps1

      - name: Deploy
        run: packaging\windows\${{ matrix.PACKAGE_TYPE }}\deploy.ps1
        env:
          DELIVERY_CREDENTIALS: ${{ secrets.DELIVERY_CREDENTIALS2 }}

      # # Debug with RDP
      # - name: Install Ngrok
      #   run: |
      #     Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
      #     Expand-Archive ngrok.zip
      #     .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      #   env:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      # - name: Enable TS and generate login password
      #   run: |
      #     # Generate password
      #     Add-Type -AssemblyName System.Web
      #     $env:loginpass = [System.Web.Security.Membership]::GeneratePassword(8,2)
      #     # Install TS
      #     Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      #     Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      #     Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
      #     Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "$env:loginpass" -Force)
      #     # Print password
      #     Write-Host "---------------------------------------"
      #     Write-Host "Use the following credentials to login:"
      #     Write-Host "Username: runneradmin"
      #     Write-Host "Password: $env:loginpass"
      #     Write-Host "---------------------------------------"
      # - name: Create Ngrok Tunnel
      #   run: .\ngrok\ngrok.exe tcp 3389
